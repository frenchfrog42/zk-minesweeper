import "./mimc7" as mimc7;
import "utils/pack/bool/unpack256.zok" as unpack256bool;
import "utils/pack/u32/unpack128.zok" as unpack128u32;


def isMineHit(bool[256] mineFieldBits, u32 x, u32 y) -> bool {
    return mineFieldBits[255 - (y * 15 + x)];
}

def getMineCount(bool[256] mineFieldBits) -> u32 {
    u32 mut cnt = 0;
    for u32 i in 0..225 {   // 15 x 15 field is encoded with 225 bits
        cnt = mineFieldBits[255 - i] ? cnt + 1 : cnt;
    }
    return cnt;
}

def getNeighboringMineCount(bool[256] mineFieldBits, u32 x, u32 y) -> u32 {
    bool ul = mineFieldBits[(255 -((y-1) * 15 + x - 1)) % 255];
    bool uc = mineFieldBits[(255 - ((y-1) * 15 + x)) % 255];
    bool ur = mineFieldBits[(255 - ((y-1) * 15 + x + 1)) % 255];

    bool ml = mineFieldBits[(255 - (y * 15 + x - 1)) % 255];
    bool mr = mineFieldBits[(255 - (y * 15 + x + 1)) % 255];

    bool ll = mineFieldBits[(255 - ((y+1) * 15 + x - 1)) % 255];
    bool lc = mineFieldBits[(255 - ((y+1) * 15 + x)) % 255];
    bool lr = mineFieldBits[(255 - ((y+1) * 15 + x + 1)) % 255];
    
    u32 mut sum = 0;
    sum = if ul && x > 0 && y > 0 {sum + 1} else {sum};
    sum = if uc && y > 0 {sum + 1} else {sum};
    sum = if ur && x < 14 && y > 0 {sum + 1} else {sum};
    sum = if ml && x > 0 {sum + 1} else {sum};
    sum = if mr && x < 14 {sum + 1} else {sum};
    sum = if ll && x > 0 && y < 14 {sum + 1} else {sum};
    sum = if lc && y < 14 {sum + 1} else {sum};
    sum = if lr && x < 14 && y < 14 {sum + 1} else {sum};

    return sum;
}

def main(private field mineField, field mineFieldCommit, field targetX, field targetY, bool mineHit, field neighborMineCount) {
    // Mine field commit check.
    // The public input with the commit value is enforced by the verifier smart contract. This
    // way the mine field configuration cannot be changed once it's commited to.
    assert(mimc7::<91>(mineField, 0) == mineFieldCommit);
    
    bool[256] mineFieldBits = unpack256bool(mineField);
    u32 x = unpack128u32(targetX)[3];
    u32 y = unpack128u32(targetY)[3];
    u32 neighCnt = unpack128u32(neighborMineCount)[3];
    
    // Check if field contains the right number of mines (32 in our example).
    assert(getMineCount(mineFieldBits) == 32);

    // Check if target field is in range. (15 x 15 mine field).
    assert(x >= 0 && x < 15 && y >= 0 && y < 15);

    // Check if target contains a mine.
    assert(mineHit == isMineHit(mineFieldBits, x, y));

    // Get neighboring mine count.
    assert(neighCnt == getNeighboringMineCount(mineFieldBits, x, y));

    return;
}
