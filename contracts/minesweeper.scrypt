import "verifier.scrypt";


contract Minesweeper {
    
    static const int MINE_COUNT = 32;

    PubKey player;
    PubKey server;

    int mineFieldCommit;

    @state
    int successfulReveals;

    @state
    bool playersTurn;
    
    @state
    int lastRevealX;
    @state
    int lastRevealY;
    
    int rewardAmount;

    public function update(
            Sig sig,
            bool isMine,
            int neighborMineCount,
            Proof proof,
            SigHashPreimage txPreimage) {

        require(this.playersTurn == false);
        this.playersTurn = true;

        require(checkSig(sig, this.server));

        require(
            ZKSNARK.verify(
                [this.mineFieldCommit, 
                 this.lastRevealX, this.lastRevealY, 
                 isMine ? 1 : 0, 
                 neighborMineCount],
            proof)
        );

        // If player revealed a field without a mine, increase his score.
        if (!isMine) {
            this.successfulReveals++;
        }
        bytes outputs = b'';
        if (this.successfulReveals >= 15 * 15 - MINE_COUNT) {
            // Pay player if he revealed all the empty fields.
            bytes script = Utils.buildPublicKeyHashScript(hash160(this.player));
            outputs = Utils.buildOutput(script, this.rewardAmount);
        } else if (isMine) {
            // Pay server if player hit a mine.
            bytes script = Utils.buildPublicKeyHashScript(hash160(this.server));
            outputs = Utils.buildOutput(script, this.rewardAmount);
        } else {
            // Continue game.
            bytes outputScript = this.getStateScript();
            outputs = Utils.buildOutput(outputScript, this.rewardAmount);
        }

        //// The custom sighash type is to enably arbitrary funding of the contracts propagation.
        //// Note: make sure the offline code to generate the preimage also aplies these flags.
        SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.SINGLE | SigHash.FORKID;
        require(Tx.checkPreimageSigHashType(txPreimage, sigHashType));

        // Make sure the transaction contains the expected outputs.
        require(hash256(outputs) == SigHash.hashOutputs(txPreimage));
    }
    
    public function reveal(Sig sig, int x, int y, SigHashPreimage txPreimage) {
        require(this.playersTurn == true);
        this.playersTurn = false;

        require(checkSig(sig, this.player));

        require(x >= 0 && x < 15);
        require(y >= 0 && y < 15);
        this.lastRevealX = x;
        this.lastRevealY = y;

        // The custom sighash type is to enably arbitrary funding of the contracts propagation.
        // Note: make sure the offline code to generate the preimage also aplies these flags.
        SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.SINGLE | SigHash.FORKID;
        require(Tx.checkPreimageSigHashType(txPreimage, sigHashType));

        // Make sure the transaction contains the expected outputs.
        bytes outputScript = this.getStateScript();
        bytes outputs = Utils.buildOutput(outputScript, this.rewardAmount);
        require(hash256(outputs) == SigHash.hashOutputs(txPreimage));
    }

}
